*nvimux* Neovim as a TMUX replacement

=============================================================================
CONTENTS                                                        *nvimux-help*

  Introduction............................|nvimux-introduction|
  Awesomeness.............................|nvimux-awesomeness|
  Commands................................|nvimux-commands|
  Functions...............................|nvimux-functions|
  Customizing.............................|nvimux-customizing|
  Credits.................................|nvimux-credits|

=============================================================================
Introduction                                            *nvimux-introduction*

Nvimux is just a series of keybindings to allow neovim to work similarly to
TMUX.

Most of the common commands should be implemented and it should be no trouble
setting up new commands in case you miss something

=============================================================================
Awesomeness                                              *nvimux-awesomeness*

Nvimux implements TMUX commands as aliases to neovim commands, as well as
some interesting features such as a customizable toggleable term.

Below are some of the awesome stuff implemented here that are not natively
implemented in tmux.

Quick Terminal                               *nvimux_quick-term* *quick-term*
                  Nvimux allows a quick terminal to be available through all
                  tabs through the shortcut |nvimux-prefix|q. It will open
                  the same shared terminal on all windows. If using |neoterm|,
                  will make use of |Ttoggle|.

=============================================================================
Commands                                                    *nvimux-commands*

Nvimux provides some commands for you to reuse its logic allowing even
further customization.

NvimuxVerticalSplit                                     *NvimuxVerticalSplit*
                  Simple alias for quick vertical window splitting.

NvimuxHorizontalSplit                                 *NvimuxHorizontalSplit*
                  Simple alias for quick horizontal window splitting.

NvimuxTermPaste                                             *NvimuxTermPaste*
                  Paste contents into terminal.
                  Only available if current buffer is a terminal.

NvimuxToggleTerm                                           *NvimuxToggleTerm*
                  Toggle quickterm using global config for quickterm scope.
                  Behavior can be set at {g:nvimux_quickterm_scope}.

NvimuxTermRename new-term-name                             *NvimuxTermRename*
                  Renames current term buffer to supplied argument name.
                  Only available if current buffer is a terminal.


=============================================================================
Functions                                                  *nvimux-functions*

NvimuxToggleTermFunc()                                 *NvimuxToggleTermFunc*
                  Toggles a quickterm according to nvimux quickter scope.
                  This is set via {g:nvimux_quickterm_scope} variable.
                  Calls function supplied via {g:nvimux_quickterm_provider},
                  defaulting to a simple call to native terminal.

NvimuxRawToggleTerm(backing_var, create_new)            *NvimuxRawToggleTerm*
                  Allows toggling a terminal buffer, using {backing_var} to
                  determine the state of such terminal and {create_new} to
                  create a new terminal instance if {backing_var} is not set
                  or returns -1.
                  The {backing_var} variable should hold the buffer id and
                  the supplied argument is the name of the variable along
                  with the correct scope on which the toggleable terminal is
                  available.

NvimuxInteractiveTermRename()                   *NvimuxInteractiveTermRename*
                  Prompts the user for a new name for current terminal.
                  Calls command {NvimuxTermRename} with supplied new terminal
                  name.

=============================================================================
Customizing                                              *nvimux-customizing*

Nvimux allows several customizations on how to use it, as depicted below.

g:nvimux_enable_var
                  Sets what variable (environment or otherwise) to check to
		  enable nvimux regardless of whether tmux is active.
		  Defaults to>
		    let g:nvimux_enable_var = '$NVIMUX_ENABLE'

g:nvimux_prefix                              *nvimux_prefix* *g:nvimux_prefix*
                  Allows a different shortcut to nvimux commands.
                  Defaults to >
                    let g:nvimux_prefix='<C-b>'

g:nvimux_no_neoterm                  *nvimux_no_neoterm* *g:nvimux_no_neoterm*
                  This has been removed on commit 37cc7b8cdc4. Neoterm is no
                  longer a dependency and can be integrated using
                  {nvimux_new_term}, {nvimux_close_term} and
                  {nvimux_quickterm_provider} variables.

g:nvimux_quickterm_provider                      *g:nvimux_quickterm_provider*
                  Specifies the function that creates a quickterm.

g:nvimux_quickterm_scope                            *g:nvimux_quickterm_scope*
                  Specifies the scope available for the quickterm.
                  If set to global scope, the quickterm will be shared across
                  tabs. If tab-local, each tab will have its own quickterm.
                  Defaults to >
                    let g:nvimux_quickterm_scope = 'g'

g:nvimux_quickterm_direction                    *g:nvimux_quickterm_direction*
                  Specifies the direction to open the scratchpad terminal.
                  Relative to default quickterm logic.
                  Defaults to >
                    let g:nvimux_quickterm_direction = 'botright'

g:nvimux_quickterm_orientation                *g:nvimux_quickterm_orientation*
                  Specifies the orientation to open the scratchpad terminal.
                  Relative to default quickterm logic.
                  Defaults to >
                    let g:nvimux_quickterm_orientation = 'vertical'

g:nvimux_quickterm_size                              *g:nvimux_quickterm_size*
                  Specifies the size of the scratchpad terminal.
                  Relative to default quickterm logic.
                  Defaults to >
                    let g:nvimux_quickterm_size = ''

g:nvimux_open_term_by_default                 *g:nvimux_open_term_by_default*
                  If set, |nvimux_prefix|c will open a terminal instead of an
                  empty buffer.
                  Is not set by default.

g:nvimux_override_{command}                        *g:nvomux_override_command*
                  Allows overriding commands with custom commands:
                  Example >
                    let g:nvimux_override_c = 'echomsg "Open new tab" | tabe'

g:nvimux_custom_bindings                            *g:nvimux_custom_bindings*
                  Allows custom bindings using nvimux's bind function.
                  Takes a list with three parameters:
                    key => Key to be set after <prefix>
                    command => the command to be used with the binding
                    modes => for which modes it will be valid. Supports:
                      'n' => Normal Mode
                      'v' => Visual Mode
                      'i' => Insert Mode; Prefixes command with '<ESC>'
                      't' => Terminal Mode' Prefixes with <C-\><C-n>
                  Example >
                    let g:nvimux_custom_bindings = [
                      \['s', ':sp<CR>', ['n', 'v', 'i', 't']],
                      \['v', ':vs<CR>', ['n', 'v', 'i', 't']]
                    \]

g:nvimux_vertical_split                              *g:nvimux_vertical_split*
                  Determines how nvimux splits vertically.
                  Defaults to >
                    let g:nvimux_vertical_split = ':NvimuxVerticalSplit<CR>'

g:nvimux_horizontal_split                          *g:nvimux_horizontal_split*
                  Determines how nvimux splits horizontally.
                  Defaults to >
                    let g:nvimux_horizontal_split = ':NvimuxHorizontalSplit<CR>'

g:nvimux_quickterm_scope                            *g:nvimux_quickterm_scope*
                  Allows to set quickterm to be global or tab-local.
                  Defaults to >
                    let g:nvimux_quickterm_scope = 'g'

                  Tab-local config >
                    let g:nvimux_quickterm_scope = 't'

==============================================================================
Credits                                                       *nvimux-credits*

Plugin created by Henry Kupty <hkupty@gmail.com>.
It is free to use and extend. Please consider opening a pull request if
extended.

Source at https://github.com/hkupty/nvimux
